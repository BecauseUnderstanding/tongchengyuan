package com.juns.wechat.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juns.wechat.bean.UserExtendInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_EXTEND_INFO".
*/
public class UserExtendInfoDao extends AbstractDao<UserExtendInfo, String> {

    public static final String TABLENAME = "USER_EXTEND_INFO";

    /**
     * Properties of entity UserExtendInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserExtendId = new Property(0, String.class, "UserExtendId", true, "USER_EXTEND_ID");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
    }


    public UserExtendInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserExtendInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_EXTEND_INFO\" (" + //
                "\"USER_EXTEND_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: UserExtendId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"DATA\" TEXT);"); // 2: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_EXTEND_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserExtendInfo entity) {
        stmt.clearBindings();
 
        String UserExtendId = entity.getUserExtendId();
        if (UserExtendId != null) {
            stmt.bindString(1, UserExtendId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserExtendInfo entity) {
        stmt.clearBindings();
 
        String UserExtendId = entity.getUserExtendId();
        if (UserExtendId != null) {
            stmt.bindString(1, UserExtendId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserExtendInfo readEntity(Cursor cursor, int offset) {
        UserExtendInfo entity = new UserExtendInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // UserExtendId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserExtendInfo entity, int offset) {
        entity.setUserExtendId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserExtendInfo entity, long rowId) {
        return entity.getUserExtendId();
    }
    
    @Override
    public String getKey(UserExtendInfo entity) {
        if(entity != null) {
            return entity.getUserExtendId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserExtendInfo entity) {
        return entity.getUserExtendId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
